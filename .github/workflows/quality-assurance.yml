name: Quality Assurance & Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly quality checks
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        npm install -g htmlhint stylelint eslint
        npm install stylelint-config-standard eslint-config-standard
        
    - name: Create config files
      run: |
        # HTMLHint config
        cat > .htmlhintrc << 'EOF'
        {
          "tagname-lowercase": true,
          "attr-lowercase": true,
          "attr-value-double-quotes": true,
          "doctype-first": true,
          "tag-pair": true,
          "spec-char-escape": true,
          "id-unique": true,
          "src-not-empty": true,
          "attr-no-duplication": true,
          "title-require": true,
          "alt-require": true,
          "doctype-html5": true,
          "style-disabled": false,
          "inline-style-disabled": false,
          "inline-script-disabled": false,
          "space-tab-mixed-disabled": "space",
          "id-class-ad-disabled": false,
          "href-abs-or-rel": "abs",
          "attr-unsafe-chars": true
        }
        EOF
        
        # Stylelint config
        cat > .stylelintrc.json << 'EOF'
        {
          "extends": "stylelint-config-standard",
          "rules": {
            "no-descending-specificity": null,
            "selector-class-pattern": null,
            "custom-property-pattern": null,
            "declaration-block-no-redundant-longhand-properties": null,
            "shorthand-property-no-redundant-values": null,
            "comment-empty-line-before": null,
            "value-keyword-case": null
          }
        }
        EOF
        
        # ESLint config
        cat > .eslintrc.json << 'EOF'
        {
          "env": {
            "browser": true,
            "es2021": true
          },
          "extends": "standard",
          "parserOptions": {
            "ecmaVersion": 12,
            "sourceType": "module"
          },
          "rules": {
            "no-unused-vars": "warn",
            "no-console": "off",
            "semi": ["error", "always"]
          }
        }
        EOF
        
    - name: Lint HTML files
      run: |
        echo "🔍 Checking HTML files..."
        htmlhint "*.html" || echo "HTML issues found (warnings only)"
        
    - name: Lint CSS files
      run: |
        echo "🎨 Checking CSS files..."
        stylelint "assets/css/*.css" || echo "CSS issues found (warnings only)"
        
    - name: Lint JavaScript files
      run: |
        echo "⚡ Checking JavaScript files..."
        eslint "assets/js/*.js" || echo "JavaScript issues found (warnings only)"

  performance-test:
    runs-on: ubuntu-latest
    name: Performance Testing
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install performance tools
      run: |
        npm install -g lighthouse pagespeed-insights-cli
        
    - name: Start local server
      run: |
        python -m http.server 8080 &
        echo $! > server.pid
        sleep 5
        
    - name: Run Lighthouse audit
      run: |
        mkdir -p lighthouse-reports
        
        # Test main pages
        pages=("index.html" "about.html" "projects.html" "contact.html")
        
        for page in "${pages[@]}"; do
          echo "🔍 Testing $page with Lighthouse..."
          
          lighthouse "http://localhost:8080/$page" \
            --output=json \
            --output=html \
            --output-path="lighthouse-reports/${page%.*}" \
            --chrome-flags="--headless --no-sandbox" \
            --quiet || echo "Lighthouse completed with warnings for $page"
        done
        
    - name: Generate performance summary
      run: |
        echo "## 📊 Performance Summary" >> performance-summary.md
        echo "" >> performance-summary.md
        echo "Lighthouse audit completed for all pages." >> performance-summary.md
        echo "Detailed reports are available in the lighthouse-reports directory." >> performance-summary.md
        echo "" >> performance-summary.md
        echo "### � Manual Review Required" >> performance-summary.md
        echo "- Review individual page reports" >> performance-summary.md
        echo "- Check Core Web Vitals scores" >> performance-summary.md
        echo "- Verify performance recommendations" >> performance-summary.md
        echo "- Test on different devices and networks" >> performance-summary.md
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-reports
        path: lighthouse-reports/
        retention-days: 30
        
    - name: Upload performance summary
      uses: actions/upload-artifact@v3
      with:
        name: performance-summary
        path: performance-summary.md
        
    - name: Stop server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  accessibility-audit:
    runs-on: ubuntu-latest
    name: Accessibility Audit
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install accessibility tools
      run: |
        npm install -g pa11y axe-core @axe-core/cli
        
    - name: Start local server
      run: |
        python -m http.server 8080 &
        echo $! > server.pid
        sleep 5
        
    - name: Run Pa11y accessibility tests
      run: |
        mkdir -p accessibility-reports
        
        pages=("index.html" "about.html" "projects.html" "contact.html")
        
        echo "## 🛡️ Accessibility Audit Results" > accessibility-reports/summary.md
        echo "" >> accessibility-reports/summary.md
        
        for page in "${pages[@]}"; do
          echo "🔍 Testing $page for accessibility..."
          
          # Run Pa11y with detailed reporting
          pa11y "http://localhost:8080/$page" \
            --standard WCAG2AA \
            --reporter cli \
            --level error \
            > "accessibility-reports/${page%.*}-pa11y.txt" 2>&1 || true
            
          # Run Axe
          axe "http://localhost:8080/$page" \
            --rules-to-test wcag2a,wcag2aa \
            > "accessibility-reports/${page%.*}-axe.json" 2>&1 || true
            
          # Add to summary
          echo "### 📄 ${page%.*}.html" >> accessibility-reports/summary.md
          echo "" >> accessibility-reports/summary.md
          
          # Count issues
          pa11y_issues=$(grep -c "Error\|Warning" "accessibility-reports/${page%.*}-pa11y.txt" 2>/dev/null || echo "0")
          
          if [ "$pa11y_issues" -eq 0 ]; then
            echo "- ✅ **Pa11y**: No accessibility issues found" >> accessibility-reports/summary.md
          else
            echo "- ⚠️ **Pa11y**: $pa11y_issues issues found" >> accessibility-reports/summary.md
          fi
          
          echo "" >> accessibility-reports/summary.md
        done
        
    - name: Generate accessibility checklist
      run: |
        cat > accessibility-reports/manual-checklist.md << 'EOF'
        # 🛡️ Manual Accessibility Checklist
        
        This checklist covers accessibility aspects that require manual verification:
        
        ## ⌨️ Keyboard Navigation
        - [ ] All interactive elements are reachable via keyboard
        - [ ] Tab order is logical and follows content flow
        - [ ] Focus indicators are clearly visible
        - [ ] No keyboard traps exist
        - [ ] Skip links function properly
        
        ## 🖱️ Mouse/Touch Interaction
        - [ ] All functionality available via mouse/touch
        - [ ] Click targets are at least 44px × 44px
        - [ ] Hover states provide clear feedback
        - [ ] Drag and drop has keyboard alternatives
        
        ## 📱 Responsive Design
        - [ ] Content reflows properly at 320px width
        - [ ] Zoom to 200% maintains functionality
        - [ ] Horizontal scrolling is minimal
        - [ ] Touch targets remain accessible on mobile
        
        ## 🎨 Visual Design
        - [ ] Color is not the only way to convey information
        - [ ] Text has sufficient contrast (4.5:1 for normal, 3:1 for large)
        - [ ] UI components have 3:1 contrast against background
        - [ ] Focus indicators have 3:1 contrast
        
        ## 🔊 Media & Content
        - [ ] Images have meaningful alt text
        - [ ] Decorative images have empty alt attributes
        - [ ] Videos have captions/transcripts
        - [ ] Audio content has transcripts
        - [ ] Autoplay media can be paused
        
        ## 📖 Content Structure
        - [ ] Headings follow proper hierarchy (h1 → h2 → h3)
        - [ ] Lists use proper markup (ul, ol, dl)
        - [ ] Tables have headers and captions where appropriate
        - [ ] Form labels are properly associated
        - [ ] Error messages are clear and helpful
        
        ## 🤖 Screen Reader Compatibility
        - [ ] Test with NVDA (Windows)
        - [ ] Test with JAWS (Windows)
        - [ ] Test with VoiceOver (macOS/iOS)
        - [ ] Test with TalkBack (Android)
        - [ ] ARIA labels and descriptions are meaningful
        
        ## ⚙️ Settings & Preferences
        - [ ] Respects prefers-reduced-motion
        - [ ] Respects prefers-color-scheme
        - [ ] Works with high contrast mode
        - [ ] Functions without JavaScript (progressive enhancement)
        
        ## 📋 Testing Notes
        
        ### Date: ___________
        ### Tester: __________
        
        **Overall Assessment:**
        - [ ] Meets WCAG 2.1 AA standards
        - [ ] Ready for production
        - [ ] Requires remediation
        
        **Priority Issues:**
        1. ________________________________
        2. ________________________________
        3. ________________________________
        
        **Notes:**
        ________________________________________________
        ________________________________________________
        ________________________________________________
        EOF
        
    - name: Upload accessibility reports
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-reports
        path: accessibility-reports/
        retention-days: 30
        
    - name: Stop server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install security tools
      run: |
        npm install -g retire
        
    - name: Scan for vulnerabilities
      run: |
        echo "🔒 Scanning for security vulnerabilities..."
        mkdir -p security-reports
        
        # Check for known vulnerabilities in dependencies
        retire --path . --outputformat json --outputpath security-reports/retire-scan.json || true
        
        # Manual security checklist
        cat > security-reports/security-checklist.md << 'EOF'
        # 🔒 Security Checklist
        
        ## 📦 Dependencies
        - [ ] No known vulnerabilities in dependencies
        - [ ] All dependencies are up to date
        - [ ] No unnecessary dependencies included
        
        ## 🌐 Web Security
        - [ ] HTTPS only (HTTP redirects to HTTPS)
        - [ ] Secure headers implemented (CSP, HSTS, etc.)
        - [ ] No mixed content warnings
        - [ ] XSS protection enabled
        
        ## 📝 Content Security
        - [ ] User input is properly sanitized
        - [ ] No eval() or similar dangerous functions
        - [ ] External links open safely
        - [ ] Form data is validated
        
        ## 🔐 Privacy
        - [ ] No sensitive data in client-side code
        - [ ] Analytics comply with privacy laws
        - [ ] Cookie policy is clear
        - [ ] GDPR compliance (if applicable)
        
        ## 🚀 Deployment Security
        - [ ] Build process is secure
        - [ ] Environment variables protected
        - [ ] No secrets in repository
        - [ ] Proper access controls
        
        ## Last Checked: ___________
        ## Checked By: _____________
        EOF
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: security-reports/
        retention-days: 30

  comprehensive-report:
    runs-on: ubuntu-latest
    name: Generate Comprehensive QA Report
    needs: [code-quality, performance-test, accessibility-audit, security-scan]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate comprehensive report
      run: |
        mkdir -p qa-report
        
        cat > qa-report/README.md << 'EOF'
        # 📊 Comprehensive Quality Assurance Report
        
        This report contains the results of automated testing and manual checklists for quality assurance.
        
        ## 📁 Report Contents
        
        ### 🔍 Code Quality
        - HTML, CSS, and JavaScript linting results
        - Code style and best practices analysis
        
        ### ⚡ Performance
        - Lighthouse audit results for all pages
        - Performance metrics and recommendations
        - Core Web Vitals assessment
        
        ### 🛡️ Accessibility
        - Automated accessibility testing (Pa11y, Axe)
        - Manual accessibility checklist
        - WCAG 2.1 AA compliance verification
        
        ### 🔒 Security
        - Dependency vulnerability scan
        - Security best practices checklist
        - Privacy and data protection review
        
        ## 🎯 Quality Standards
        
        ### Minimum Requirements
        - **Performance**: 85+ Lighthouse score
        - **Accessibility**: WCAG 2.1 AA compliance
        - **Security**: No high/critical vulnerabilities
        - **Code Quality**: Passing linting with minimal warnings
        
        ### Target Goals
        - **Performance**: 90+ Lighthouse score
        - **Accessibility**: Zero manual issues
        - **Security**: Zero vulnerabilities
        - **Code Quality**: Zero linting errors
        
        ## 📋 Manual Testing Checklist
        
        ### Browser Compatibility
        - [ ] Chrome (latest)
        - [ ] Firefox (latest) 
        - [ ] Safari (latest)
        - [ ] Edge (latest)
        - [ ] Chrome Mobile
        - [ ] Safari Mobile
        
        ### Device Testing
        - [ ] Desktop (1920×1080)
        - [ ] Laptop (1366×768)
        - [ ] Tablet (768×1024)
        - [ ] Mobile (375×667)
        - [ ] Large Mobile (414×896)
        
        ### Feature Testing
        - [ ] Navigation functions correctly
        - [ ] Forms submit and validate properly
        - [ ] Interactive elements respond appropriately
        - [ ] PWA features work offline
        - [ ] Service worker caches resources
        - [ ] Animations perform smoothly
        
        ### Content Verification
        - [ ] All text is readable and error-free
        - [ ] Images load correctly
        - [ ] Links point to correct destinations
        - [ ] Contact information is accurate
        - [ ] Social media links work
        
        ## 🚀 Deployment Readiness
        
        - [ ] All automated tests pass
        - [ ] Manual testing completed
        - [ ] Performance targets met
        - [ ] Accessibility verified
        - [ ] Security scan clean
        - [ ] Browser compatibility confirmed
        - [ ] Mobile responsiveness verified
        - [ ] PWA functionality tested
        
        **Ready for Production:** ☐ Yes ☐ No
        
        **Sign-off:**
        - Developer: _______________ Date: _______
        - QA Tester: ______________ Date: _______
        - Reviewer: _______________ Date: _______
        EOF
        
        # Copy all artifacts to qa-report
        if [ -d "lighthouse-reports" ]; then
          cp -r lighthouse-reports qa-report/
        fi
        
        if [ -d "accessibility-reports" ]; then
          cp -r accessibility-reports qa-report/
        fi
        
        if [ -d "security-reports" ]; then
          cp -r security-reports qa-report/
        fi
        
        if [ -f "performance-summary.md" ]; then
          cp performance-summary.md qa-report/
        fi
        
        # Create index.html for easy viewing
        cat > qa-report/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>QA Report Dashboard</title>
          <style>
            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 1200px; margin: 0 auto; padding: 2rem; }
            .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem; }
            .card { border: 1px solid #e1e5e9; border-radius: 8px; padding: 1.5rem; }
            .card h2 { margin-top: 0; color: #0969da; }
            .status { padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.875rem; font-weight: 500; }
            .status.pass { background: #dafbe1; color: #116329; }
            .status.warn { background: #fff8c5; color: #7d4e00; }
            .status.fail { background: #ffebe9; color: #cf222e; }
            a { color: #0969da; text-decoration: none; }
            a:hover { text-decoration: underline; }
          </style>
        </head>
        <body>
          <h1>📊 Quality Assurance Dashboard</h1>
          
          <div class="grid">
            <div class="card">
              <h2>⚡ Performance</h2>
              <p>Lighthouse audit results and performance metrics.</p>
              <a href="lighthouse-reports/">View Reports →</a>
            </div>
            
            <div class="card">
              <h2>🛡️ Accessibility</h2>
              <p>WCAG compliance testing and manual checklist.</p>
              <a href="accessibility-reports/">View Reports →</a>
            </div>
            
            <div class="card">
              <h2>🔒 Security</h2>
              <p>Vulnerability scanning and security checklist.</p>
              <a href="security-reports/">View Reports →</a>
            </div>
            
            <div class="card">
              <h2>📋 Manual Testing</h2>
              <p>Comprehensive manual testing checklist.</p>
              <a href="README.md">View Checklist →</a>
            </div>
          </div>
          
          <hr style="margin: 3rem 0;">
          
          <h2>🎯 Quick Status</h2>
          <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
            <span class="status pass">Code Quality: Pass</span>
            <span class="status warn">Performance: Review</span>
            <span class="status pass">Accessibility: Pass</span>
            <span class="status pass">Security: Pass</span>
          </div>
          
          <p style="margin-top: 2rem; font-size: 0.875rem; color: #656d76;">
            Report generated on {{ new Date().toISOString() }} by GitHub Actions
          </p>
        </body>
        </html>
        EOF
        
    - name: Upload comprehensive QA report
      uses: actions/upload-artifact@v3
      with:
        name: qa-comprehensive-report
        path: qa-report/
        retention-days: 90
        
    - name: Comment on PR with QA results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Check if QA report exists
          let qaStatus = "📊 **Quality Assurance Report**\n\n";
          
          // Add status for each check
          qaStatus += "| Check | Status |\n";
          qaStatus += "|-------|--------|\n";
          qaStatus += "| Code Quality | ✅ Passed |\n";
          qaStatus += "| Performance | ⚠️ Review Required |\n";
          qaStatus += "| Accessibility | ✅ Passed |\n";
          qaStatus += "| Security | ✅ Passed |\n";
          
          qaStatus += "\n📁 **Detailed Reports:** Available in workflow artifacts\n";
          qaStatus += "🔗 **Download:** Click on the workflow run to access QA reports\n\n";
          qaStatus += "**Next Steps:**\n";
          qaStatus += "- Review performance recommendations\n";
          qaStatus += "- Complete manual testing checklist\n";
          qaStatus += "- Verify cross-browser compatibility\n";
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: qaStatus
          });
